syntax = "proto3";
package eigentrust;

import "google/protobuf/any.proto";

option go_package = "k3l.io/go-eigentrust/api/pb";

// A timestamp is expressed in one or more qwords (64-bit unsigned integers),
// and is used for trust matrices/vectors and their entries.
// go-eigentrust treats the qwords as a variable-length big endian unsigned int,
// e.g. {0x1234, 0x567890abcdef} -> 0x12340000567890abcdef.
//
// Their semantics are to be defined by applications.  Examples:
//
// - {seconds} of a UNIX timestamp
// - {microseconds} of a UNIX timestamp
// - {seconds, nanosecond part (0-999999999)} of a UNIX timestamp
// - {block height, txn index} of an EVM on-chain event.

message TrustMatrixHeader {
  optional string id = 1;
  repeated uint64 timestamp_qwords = 2;
}

message TrustMatrixEntry {
  string truster = 1;
  string trustee = 2;
  double value = 3;
}

message TrustVectorHeader {
  optional string id = 1;
  repeated uint64 timestamp_qwords = 2;
}

message TrustVectorEntry {
  string trustee = 1;
  double value = 2;
}

// Trust vector destination, i.e. where to publish.
message TrustVectorDestination {
  // Destination location scheme.
  string scheme = 1;

  // Scheme-specific parameters.
  google.protobuf.Any params = 2;
}

message ComputeParams {
  // Local trust matrix ID.
  string local_trust_id = 1;

  // Pre-trust vector ID.
  string pre_trust_id = 2;

  // Alpha value (pre-trust strength).
  optional double alpha = 3;

  // Epsilon value (convergence exit criteria).
  optional double epsilon = 4;

  // Global trust vector ID.
  // Must already exist, i.e. call CreateTrustVector to create one.
  // Its contents are used as the initial vector (iteration starting point).
  // If its contents are zero, e.g. a brand new trust vector is passed,
  // the pre-trust contents are copied and used as the starting point.
  // Upon return, the vector contains the computed global trust â€“
  // use GetTrustVector to retrieve its contents.
  string global_trust_id = 5;

  // Maximum number of iterations to perform, 0 (default): unlimited.
  uint32 max_iterations = 6;

  // Where to upload the results.
  // Leave empty to disable automatic pushing.
  repeated TrustVectorDestination destinations = 7;

  // TODO(ek): Add flat-tail
}

// A periodic compute job specification.
message ComputeJobSpec {
  // Compute parameters.
  // Input timestamps (such as local trust and pre-trust)
  // must have the same semantics.
  ComputeParams params = 1;

  // Re-compute period.
  //
  // Timestamps are partitioned into time windows,
  // i.e. window number = timestamp % period.
  // A re-compute is triggered upon seeing an input update (LT or PT) whose
  // timestamp belongs to a later window than the current result timestamp.
  // The result bears the starting timestamp of the later window,
  // and reflects all the inputs BEFORE the starting timestamp.
  //
  // Example: With period=1000 and current result timestamp of 9000 (initial):
  //
  // input | window         | triggered | result timestamp
  // ==============================================
  // 9947  | [9000..10000)  | no        |
  // 10814 | [10000..11000) | yes       | 10000
  // 11438 | [11000..12000) | yes       | 11000
  // 11975 | [11000..12000) | no        |
  // 11999 | [11000..12000) | no        |
  // 12000 | [12000..13000) | yes       | 12000
  // 12014 | [12000..13000) | no        |
  //
  // (Note that the result for timestamp=12000
  // does NOT reflect the triggering input at timestamp=12000.)
  repeated uint64 period_qwords = 2;
}

message CreateTrustMatrixRequest {
}

message CreateTrustMatrixResponse {
  string id = 1;
}

message GetTrustMatrixRequest {
  string id = 1;
}

message GetTrustMatrixResponse {
  oneof part {
    TrustMatrixHeader header = 1;
    TrustMatrixEntry entry = 2;
  }
}

message UpdateTrustMatrixRequest {
  TrustMatrixHeader header = 1;
  repeated TrustMatrixEntry entries = 2;
}

message UpdateTrustMatrixResponse {
}

message FlushTrustMatrixRequest {
  string id = 1;
}

message FlushTrustMatrixResponse {
}

message DeleteTrustMatrixRequest {
  string id = 1;
}

message DeleteTrustMatrixResponse {
}

message CreateTrustVectorRequest {
}

message CreateTrustVectorResponse {
  string id = 1;
}

message GetTrustVectorRequest {
  string id = 1;
}

message GetTrustVectorResponse {
  oneof part {
    TrustVectorHeader header = 1;
    TrustVectorEntry entry = 2;
  }
}

message UpdateTrustVectorRequest {
  TrustVectorHeader header = 1;
  repeated TrustVectorEntry entries = 2;
}

message UpdateTrustVectorResponse {
}

message FlushTrustVectorRequest {
  string id = 1;
}

message FlushTrustVectorResponse {
}

message DeleteTrustVectorRequest {
  string id = 1;
}

message DeleteTrustVectorResponse {
}

message BasicComputeRequest {
  ComputeParams params = 1;
}

message BasicComputeResponse {
  // TODO(ek): Add flat-tail
}

message CreateComputeJobRequest {
  ComputeJobSpec spec = 1;
}

message CreateComputeJobResponse {
  string id = 1;
}

message DeleteComputeJobRequest {
  string id = 1;
}

message DeleteComputeJobResponse {
}

service Compute {
  // Create a new trust matrix (for local trust), return its ID.
  rpc CreateTrustMatrix(CreateTrustMatrixRequest)
      returns (CreateTrustMatrixResponse) {}

  // Get the full contents of a trust matrix.
  // The header is sent first (includes metadata such as timestamp),
  // followed by non-zero entries.
  rpc GetTrustMatrix(GetTrustMatrixRequest)
      returns (stream GetTrustMatrixResponse) {}

  // Update a trust matrix.
  // The timestamp in the header field applies to all entries.
  // That is, entries for the same matrix with the same timestamp
  // can and should (but need not) be batched in the same request,
  // and entries with different timestamps cannot be batched together.
  // Updates cannot go back in time:
  // An update older than the target matrix is rejected.
  // Updates can be empty (have zero entries):
  // This can be used to force-update the timestamp of the trust matrix
  // and trigger periodic re-compute of a compute job.
  rpc UpdateTrustMatrix(UpdateTrustMatrixRequest)
      returns (UpdateTrustMatrixResponse) {}

  // Flush a trust matrix, i.e. remove (zero out) all its entries.
  rpc FlushTrustMatrix(FlushTrustMatrixRequest)
      returns (FlushTrustMatrixResponse) {}

  // Delete a trust matrix altogether.
  rpc DeleteTrustMatrix(DeleteTrustMatrixRequest)
      returns (DeleteTrustMatrixResponse) {}

  // Create a new trust vector (for pre-trust and global trust), return its ID.
  rpc CreateTrustVector(CreateTrustVectorRequest)
      returns (CreateTrustVectorResponse) {}

  // Get the full contents of a trust vector.
  // The header is setn first (includes metadata such as timestamp),
  // followed by non-zero entries.
  rpc GetTrustVector(GetTrustVectorRequest)
      returns (stream GetTrustVectorResponse) {}

  // Update a trust vector.
  // The timestamp in the header field applies to all entries.
  // That is, entries for the same vector with the same timestamp
  // can and should (but need not) be batched in the same request,
  // and entries with different timestamps cannot be batched together.
  // Updates cannot go back in time:
  // An update older than the target vector is rejected.
  rpc UpdateTrustVector(UpdateTrustVectorRequest)
      returns (UpdateTrustVectorResponse) {}

  // Flush a trust vector, i.e. remove (zero out) all its entries.
  rpc FlushTrustVector(FlushTrustVectorRequest)
      returns (FlushTrustVectorResponse) {}

  // Delete a trust vector altogether.
  rpc DeleteTrustVector(DeleteTrustVectorRequest)
      returns (DeleteTrustVectorResponse) {}

  // Perform a basic EigenTrust compute.
  rpc BasicCompute(BasicComputeRequest)
      returns (BasicComputeResponse) {}

  // Create a compute job.
  rpc CreateComputeJob(CreateComputeJobRequest)
      returns (CreateComputeJobResponse) {}

  // Delete/decommission a compute job.
  rpc DeleteComputeJob(DeleteComputeJobRequest)
      returns (DeleteComputeJobResponse) {}
}